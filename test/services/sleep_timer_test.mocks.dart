// Mocks generated by Mockito 5.4.6 from annotations
// in voidweaver/test/services/sleep_timer_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i7;

import 'package:flutter/material.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:voidweaver/services/settings_service.dart' as _i5;
import 'package:voidweaver/services/subsonic_api.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAlbum_0 extends _i1.SmartFake implements _i2.Album {
  _FakeAlbum_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSearchResult_1 extends _i1.SmartFake implements _i2.SearchResult {
  _FakeSearchResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SubsonicApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubsonicApi extends _i1.Mock implements _i2.SubsonicApi {
  MockSubsonicApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get serverUrl => (super.noSuchMethod(
        Invocation.getter(#serverUrl),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#serverUrl),
        ),
      ) as String);

  @override
  String get username => (super.noSuchMethod(
        Invocation.getter(#username),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#username),
        ),
      ) as String);

  @override
  String get password => (super.noSuchMethod(
        Invocation.getter(#password),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#password),
        ),
      ) as String);

  @override
  String get clientName => (super.noSuchMethod(
        Invocation.getter(#clientName),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#clientName),
        ),
      ) as String);

  @override
  String get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#version),
        ),
      ) as String);

  @override
  _i4.Future<List<_i2.Album>> getAlbumList() => (super.noSuchMethod(
        Invocation.method(
          #getAlbumList,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Album>>.value(<_i2.Album>[]),
      ) as _i4.Future<List<_i2.Album>>);

  @override
  _i4.Future<_i2.Album> getAlbum(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getAlbum,
          [id],
        ),
        returnValue: _i4.Future<_i2.Album>.value(_FakeAlbum_0(
          this,
          Invocation.method(
            #getAlbum,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Album>);

  @override
  _i4.Future<List<_i2.Song>> getRandomSongs([int? count = 50]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRandomSongs,
          [count],
        ),
        returnValue: _i4.Future<List<_i2.Song>>.value(<_i2.Song>[]),
      ) as _i4.Future<List<_i2.Song>>);

  @override
  String getStreamUrl(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getStreamUrl,
          [id],
        ),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #getStreamUrl,
            [id],
          ),
        ),
      ) as String);

  @override
  String getCoverArtUrl(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getCoverArtUrl,
          [id],
        ),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #getCoverArtUrl,
            [id],
          ),
        ),
      ) as String);

  @override
  _i4.Future<void> scrobbleNowPlaying(String? songId) => (super.noSuchMethod(
        Invocation.method(
          #scrobbleNowPlaying,
          [songId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> scrobbleSubmission(
    String? songId, {
    DateTime? playedAt,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #scrobbleSubmission,
          [songId],
          {#playedAt: playedAt},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.SearchResult> search(
    String? query, {
    int? artistCount = 20,
    int? albumCount = 20,
    int? songCount = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [query],
          {
            #artistCount: artistCount,
            #albumCount: albumCount,
            #songCount: songCount,
          },
        ),
        returnValue: _i4.Future<_i2.SearchResult>.value(_FakeSearchResult_1(
          this,
          Invocation.method(
            #search,
            [query],
            {
              #artistCount: artistCount,
              #albumCount: albumCount,
              #songCount: songCount,
            },
          ),
        )),
      ) as _i4.Future<_i2.SearchResult>);

  @override
  _i4.Future<List<_i2.Artist>> getArtists() => (super.noSuchMethod(
        Invocation.method(
          #getArtists,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Artist>>.value(<_i2.Artist>[]),
      ) as _i4.Future<List<_i2.Artist>>);

  @override
  _i4.Future<List<_i2.Album>> getArtistAlbums(String? artistId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getArtistAlbums,
          [artistId],
        ),
        returnValue: _i4.Future<List<_i2.Album>>.value(<_i2.Album>[]),
      ) as _i4.Future<List<_i2.Album>>);
}

/// A class which mocks [SettingsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsService extends _i1.Mock implements _i5.SettingsService {
  MockSettingsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ReplayGainMode get replayGainMode => (super.noSuchMethod(
        Invocation.getter(#replayGainMode),
        returnValue: _i5.ReplayGainMode.off,
      ) as _i5.ReplayGainMode);

  @override
  double get replayGainPreamp => (super.noSuchMethod(
        Invocation.getter(#replayGainPreamp),
        returnValue: 0.0,
      ) as double);

  @override
  bool get replayGainPreventClipping => (super.noSuchMethod(
        Invocation.getter(#replayGainPreventClipping),
        returnValue: false,
      ) as bool);

  @override
  double get replayGainFallbackGain => (super.noSuchMethod(
        Invocation.getter(#replayGainFallbackGain),
        returnValue: 0.0,
      ) as double);

  @override
  _i6.ThemeMode get themeMode => (super.noSuchMethod(
        Invocation.getter(#themeMode),
        returnValue: _i6.ThemeMode.system,
      ) as _i6.ThemeMode);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setReplayGainMode(_i5.ReplayGainMode? mode) =>
      (super.noSuchMethod(
        Invocation.method(
          #setReplayGainMode,
          [mode],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setReplayGainPreamp(double? preamp) => (super.noSuchMethod(
        Invocation.method(
          #setReplayGainPreamp,
          [preamp],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setReplayGainPreventClipping(bool? prevent) =>
      (super.noSuchMethod(
        Invocation.method(
          #setReplayGainPreventClipping,
          [prevent],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setReplayGainFallbackGain(double? gain) =>
      (super.noSuchMethod(
        Invocation.method(
          #setReplayGainFallbackGain,
          [gain],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  double calculateVolumeAdjustment({
    double? trackGain,
    double? albumGain,
    double? trackPeak,
    double? albumPeak,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateVolumeAdjustment,
          [],
          {
            #trackGain: trackGain,
            #albumGain: albumGain,
            #trackPeak: trackPeak,
            #albumPeak: albumPeak,
          },
        ),
        returnValue: 0.0,
      ) as double);

  @override
  _i4.Future<void> setThemeMode(_i6.ThemeMode? mode) => (super.noSuchMethod(
        Invocation.method(
          #setThemeMode,
          [mode],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
